package BreezeTask;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import java.nio.file.*;

public class Application {

    private static List<String> notes = new ArrayList<>(); //Create a list of notes
    private static final String notesFile = "notes.txt";
    private static final String remindersFile = "reminders.txt";
    private static List<String> reminders = new ArrayList<>();

    private static void saveNotes() {
        try {
            Files.write(Paths.get(notesFile), notes);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "You do not have any note yet: ");
        }
    }

    private static void loadNotes() {
        try {
            if (Files.exists(Paths.get(notesFile))) {
                notes = Files.readAllLines(Paths.get(notesFile));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "You do not have any note yet: ");
        }
    }

    private static void saveReminders() {
        try {
            Files.write(Paths.get(remindersFile), reminders);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "You do not have any reminder yet: ");
        }
    }

    private static void loadReminders() {
        try {
            if (Files.exists(Paths.get(remindersFile))) {
                reminders = Files.readAllLines(Paths.get(remindersFile));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "You do not have any reminder yet: ");
        }
    }
    public static void main(String[] args) {
        loadNotes();
        loadReminders();

        JFrame frame = new JFrame("NoteHub");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        JTabbedPane tabbedPane = new JTabbedPane();

        JPanel notesPanel = new JPanel(new BorderLayout());

        JTextArea noteTextArea = new JTextArea();
        noteTextArea.setFont(new Font("Times new roman", Font.PLAIN, 16));
        JScrollPane noteScrollPane = new JScrollPane(noteTextArea);

        JButton addNoteBtn = new JButton("Add Note");
        addNoteBtn.addActionListener(e -> {
                String note = noteTextArea.getText();
                if (!note.isEmpty()) {
                    try {
                        notes.add(note);
                        saveNotes();
                        noteTextArea.setText("");
                        JOptionPane.showMessageDialog(frame, "Note added succesfully");
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(frame, "Invalid note");
                    }
                }
        });

        JButton showNoteBtn = new JButton("Show Note");
        showNoteBtn.addActionListener(e -> {
            if (!notes.isEmpty()) {
                noteTextArea.setText(notes.get(notes.size() - 1));
            } else {
                JOptionPane.showMessageDialog(frame, "You do not have any note yet");
            }
        });

        /*
         * Add a scroll to the notes panel
         * Add the button to create notes into the notes panel
         * Add the button to show the notes that had already created
         */
        notesPanel.add(noteScrollPane, BorderLayout.CENTER);
        JPanel noteButtonsPanel = new JPanel(new FlowLayout());
        noteButtonsPanel.add(showNoteBtn);
        noteButtonsPanel.add(addNoteBtn);
        notesPanel.add(noteButtonsPanel, BorderLayout.SOUTH);

        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                saveNotes();
                saveReminders();
            }
        });

        JPanel remindersPanel = new JPanel(new BorderLayout());

        JTextArea reminderTextArea = new JTextArea();
        noteTextArea.setFont(new Font("Times new roman", Font.PLAIN, 16));
        JScrollPane reminderScrollPane = new JScrollPane(reminderTextArea);

        JButton addReminderBtn = new JButton("Add Reminder");
        addReminderBtn.addActionListener(e -> {
            String reminder = reminderTextArea.getText();
            if (!reminder.isEmpty()) {
                try {
                    reminders.add(reminder);
                    saveReminders();
                    reminderTextArea.setText("");
                    JOptionPane.showMessageDialog(frame, "Reminder added succesfully");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(frame, "Invalid reminder");
                }
            }
        });

        JButton showReminderBtn = new JButton("Show Reminder");
        showReminderBtn.addActionListener(e -> {
            if (!reminders.isEmpty()) {
                reminderTextArea.setText(reminders.get(reminders.size() - 1));
            } else {
                JOptionPane.showMessageDialog(frame, "You do not have any reminder yet");
            }
        });

        remindersPanel.add(reminderScrollPane, BorderLayout.CENTER);
        JPanel reminderButtonsPanel = new JPanel(new FlowLayout());
        reminderButtonsPanel.add(showReminderBtn);
        reminderButtonsPanel.add(addReminderBtn);
        remindersPanel.add(reminderButtonsPanel, BorderLayout.SOUTH);

        tabbedPane.addTab("Notes", notesPanel);
        tabbedPane.addTab("Reminders", remindersPanel);

        /*
        *
        * */

        frame.add(tabbedPane, BorderLayout.CENTER);
        frame.setVisible(true);
    }
}
